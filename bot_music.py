import urllib.request
from bs4 import BeautifulSoup
from telegram.ext import Updater, MessageHandler, Filters, CommandHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
import random
import time


class FlowParser:
    def __init__(self):
        self.NEWS_URL = 'http://the-flow.ru/news'
        self.SUPER_BASE_URL = 'http://the-flow.ru'
        self.ALB_URL = 'http://the-flow.ru/releases'
        self.INTER_URL = 'http://the-flow.ru/features'
        self.BATLE_URL = 'http://the-flow.ru/battles'
        self.CLIP_URL = 'http://the-flow.ru/videos'
        self.BASE_URL = 'http://the-flow.ru/'
        self.REPRU_URL = 'http://www.rap.ru'
        self.READ_URL = 'http://www.rap.ru/reading'
        self.what_is = '–ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–∏–ø-—Ö–æ–ø? –ß–∏—Ç–∞–π –≤–∏–∫–∏–ø–µ–¥–∏—é:\nhttps://ru.wikipedia.org/wiki/–•–∏–ø-—Ö–æ–ø_(–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π_–∂–∞–Ω—Ä)'
        self.BILL_URL = 'https://www.billboard.com/charts/hot-100'
        self.BILL_ALB_URL = 'https://www.billboard.com/charts/billboard-200'
        self.BILL_ART_URL = 'https://www.billboard.com/charts/artist-100'
        self.REP_URL = 'https://www.hotnewhiphop.com/artists/'

    def get_html(self, url):
        response = urllib.request.urlopen(url)
        return response.read()

    def parse_flow(self, html):
        hrefs = []
        soup = BeautifulSoup(html)
        table = soup.find('div', class_='items')
        news = table.find_all('div')
        for new in news:
            dicct = {
                'name': None,
                'link': None,
                'descript': None
            }
            a = new.find('a', class_='bold')
            if a:
                dicct['link'] = self.SUPER_BASE_URL + str(a).split(' ')[2].split('"')[1] + '/'
                dicct['name'] = str(a).split('<')[-2].split('>')[-1]
                div_desc = new.find('div', class_='publication__item-text')
                if div_desc:
                    dicct['descript'] = str(div_desc).split('>')[1].split('<')[0].strip()
                    hrefs.append(dicct)
        return hrefs

    def hottest_news(self, html):
        hrefs = []
        soup = BeautifulSoup(html)
        cont = soup.find('div', class_='content')
        div = cont.find_all('div', class_='fix')
        news = div[-1].find_all('div')
        for new in news[2:]:
            dicct = {
                'name': None,
                'link': None,
                'descript': None
            }
            div = new.find('div', class_='publication__item-title')
            if div:
                a = div.find('a')
                dicct['link'] = self.SUPER_BASE_URL + str(a).split(' ')[1].lstrip('href="').split('"')[0]
                dicct['name'] = a.text
                dicct['descript'] = new.find('div', class_='publication__item-text').text.strip()
                hrefs.append(dicct)
        return hrefs

    def repruparser(self, html):
        hrefs = []
        soup = BeautifulSoup(html)
        table = soup.find('div', class_='view grid clearfix')
        for new in table:
            if new != '\n':
                dicct = {
                    'name': str(new.find('a', class_='title').text),
                    'link': self.REPRU_URL+(str(new.find('a', class_='title'))).split()[2].split('"')[1]
                }
                hrefs.append(dicct)
        return hrefs

    def bill_board_parser(self,html):
        hrefs = []
        soup = BeautifulSoup(html)
        date = soup.find('time').text
        table = soup.find_all('div', class_='chart-row__title')
        for new in table:
            dicct = {
                'name': None,
                'title': None
            }
            if new.find('a'):
                dicct['name'] =  new.find('a').text.strip()
                dicct['title'] = new.find('h2').text
                hrefs.append(dicct)
            else:
                dicct['name'] = new.find('span').text.strip()
                dicct['title'] = new.find('h2').text
                hrefs.append(dicct)
        return date, hrefs

    def get_artist_info(self, artist):
        name = str(artist).strip()
        first_char = str(artist.strip())[0].lower()
        if not first_char.isalpha():
            first_char = '_'
        link = self.REP_URL + first_char + '/'
        html = self.get_html(link)
        soup = BeautifulSoup(html)
        table = soup.find('div', class_='gridItems-flex-wrap artist pull-left')
        a = table.find('a', title=name, class_='cover-title')
        href = self.REP_URL.rstrip('/artists') + str(a).split()[2].lstrip('href="').rstrip('"')
        soup = BeautifulSoup(self.get_html(href))
        table = soup.find('div', class_='col-hnhh-left no-padding-mobile')
        hrefs = []
        dicct = {
            'descript': None,
            'facts': None,
            'top_s': None,
        }
        strinfo = ''
        info = table.find('div', class_='artist-bio artistBio-block') #–¥–æ–¥–µ–ª–∞—Ç—å –±–ª–∏–Ω
        for p in info.find_all('p'):
            strinfo += ' '.join(str(p.text).split())
        dicct['descript'] = strinfo
        info = table.find('ul', class_='artist-facts-ul artistFacts-listBlock-ul')
        facts = []
        if info:
            for div in info:
                for li in div:
                    facts.append(str('# ' + li.text))
            if len(facts) > 0:
                dicct['facts'] = facts
        top = []
        info = table.find('ul', class_='dropDown-listBlock')
        for li in info:
            if li.find('div', class_='cover-title topSongs-item-title'):
                top.append(' '.join(li.find('div', class_='cover-title topSongs-item-title').text.strip().split()))
        if len(top):
            dicct['top_s'] = top
        return dicct


def get_new(link):
    obj = FlowParser()
    new = random.choice(obj.parse_flow(obj.get_html(link)))
    return str(new['name'] + '\n' + new['link'] + '\n' + new['descript'])


def get_hottest_news():
    obj = FlowParser()
    block = obj.hottest_news(obj.get_html(obj.BASE_URL))
    string = ''
    string += '–ì–ª–∞–≤–Ω—ã–µ —Ö–∏–ø-—Ö–æ–ø –Ω–æ–≤–æ—Å—Ç–∏ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏:\n\n'
    for new in block:
        string += str(new['name'] + '\n' + new['link'] + '\n' + new['descript'] + '\n\n')
    return string


def get_list_of_news(link):
    obj = FlowParser()
    news = obj.parse_flow(obj.get_html(link))
    string = ''
    for new in news:
        string += str(str(news.index(new)+1) + '. ' + new['name'] + '\n' + new['link'] + '\n' + new['descript']
                      + '\n\n')
    return string


def get_educ():
    obj = FlowParser()
    block = random.choice(obj.repruparser(obj.get_html(obj.READ_URL)))
    return str(block['name'] + '\n' + block['link'])


def get_list_of_educ():
    obj = FlowParser()
    block = obj.repruparser(obj.get_html(obj.READ_URL))
    string = ''
    for new in block:
        string += str(block.index(new)+1) + '. ' + new['name'] + '\n' + new['link'] + '\n\n'
    return string


def get_knowlage():
    obj = FlowParser()
    return obj.what_is


def get_top(top, link):
    obj = FlowParser()
    string = ''
    string += obj.bill_board_parser(obj.get_html(link))[0]+'\n'
    string += 'Billboard hot 100\n\n'
    for i in range(top):
        if i == 0:
            string += 'ü•á '+ obj.bill_board_parser(obj.get_html(link))[1][i]['name'] + '\n' + \
                      obj.bill_board_parser(obj.get_html(link))[1][i]['title'] + '\n'
        if i == 1:
            string += 'ü•à ' + obj.bill_board_parser(obj.get_html(link))[1][i]['name'] + '\n' + \
                      obj.bill_board_parser(obj.get_html(link))[1][i]['title'] + '\n'
        if i == 2:
            string += 'ü•â '+ obj.bill_board_parser(obj.get_html(link))[1][i]['name'] + '\n' + \
                      obj.bill_board_parser(obj.get_html(link))[1][i]['title'] + '\n'
        if i > 2:
            string += (str(i+1)+'. ') + obj.bill_board_parser(obj.get_html(link))[1][i]['name']+'\n'+\
            obj.bill_board_parser(obj.get_html(link))[1][i]['title']+'\n'
    string += link
    return string


def return_artist(name):
    obj = FlowParser()
    string = ''
    string += name + '\n'
    if obj.get_artist_info(name)['descript']:
        string += 'About:\n'
        string += '\t'+obj.get_artist_info(name)['descript']+'\n\n'
    if obj.get_artist_info(name)['facts']:
        string += 'Facts:\n'
        list = obj.get_artist_info(name)['facts']
        for fact in list:
            string += '\t'+fact+'\n'
        string += '\n'
    if obj.get_artist_info(name)['top_s']:
        string += 'Top songs:\n'
        list = obj.get_artist_info(name)['top_s']
        for song in list:
            string += '\t'+song+'\n'
    return string


reply_keyboard = [['–†–∞–Ω–¥–æ–º–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ‚ÅâÔ∏è', '–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üì£'],
                  ['–ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–∏–ø-—Ö–æ–ø üéµüé∂üéµ', '–û–±—Ä–∞–∑–æ–≤–∞—á–∏ üôá‚Äç‚ôÄÔ∏èüôá'],
                  ['Billboard üíΩ', '–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ä–µ–ø–µ—Ä–∞ üï∫'],
                  ['–∑–∞–∫—Ä—ã—Ç—å']]


def main_answer(bot, update):
    t = update.message.text.lower().strip()
    flow = FlowParser()
    if t == '—Å–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å':
        update.message.reply_text(get_new(flow.NEWS_URL))
    if t == '—Å–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ —Ä–µ–ª–∏–∑—ã':
        update.message.reply_text(get_new(flow.ALB_URL))
    if t == '—Å–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ –∏–Ω—Ç–µ—Ä–≤—å—é':
        update.message.reply_text(get_new(flow.INTER_URL))
    if t == '—Å–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ –±–∞—Ç–ª—ã':
        update.message.reply_text(get_new(flow.BATLE_URL))
    if t == '—Å–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ –∫–ª–∏–ø—ã':
        update.message.reply_text(get_new(flow.CLIP_URL))
    if t == '–≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏':
        update.message.reply_text(get_hottest_news())
    if t == '—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ —Ö–∏–ø-—Ö–æ–ø–∞':
        update.message.reply_text(get_list_of_news(flow.NEWS_URL))
    if t == '—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ —Ä–µ–ª–∏–∑—ã':
        update.message.reply_text(get_list_of_news(flow.ALB_URL))
    if t == '—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –∏–Ω—Ç–µ—Ä–≤—å—é':
        update.message.reply_text(get_list_of_news(flow.INTER_URL))
    if t == '—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –±–∞—Ç–ª—ã':
        update.message.reply_text(get_list_of_news(flow.BATLE_URL))
    if t == '—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –∫–ª–∏–ø—ã':
        update.message.reply_text(get_list_of_news(flow.CLIP_URL))
    if t == '—á—Ç–æ —Ç–∞–∫–æ–µ —Ö–∏–ø-—Ö–æ–ø üéµüé∂üéµ':
        update.message.reply_text(get_knowlage())
    if t == '—Å–ª—É—á–∞–π–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—á':
        update.message.reply_text(get_educ())
    if t == '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—á–∏':
        update.message.reply_text(get_list_of_educ())
    if ' '.join(t.split()[:2]) == '–±–∏–ª–ª–±–æ—Ä–¥ —Ö–æ—Ç':
        update.message.reply_text(get_top(int(t.split()[-1]), flow.BILL_URL))
    if str(t.split()[0]) == '–±–∏–ª–ª–±–æ—Ä–¥' and len(t.split()) == 2:
        update.message.reply_text(get_top(int(t.split()[-1]), flow.BILL_ALB_URL))
    if ' '.join(t.split()[:2]) == '–±–∏–ª–ª–±–æ—Ä–¥ –∞—Ä—Ç–∏—Å—Ç—ã':
        update.message.reply_text(get_top(int(t.split()[-1]), flow.BILL_ART_URL))
    if t.split()[0] == '—Ä–µ–ø–µ—Ä':
        name = ' '.join(str(update.message.text).split()[1:])
        update.message.reply_text(return_artist(name))
    if t == '–∑–∞–∫—Ä—ã—Ç—å':
        update.message.reply_text('–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!\
        –ß—Ç–æ –±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏ "–æ—Ç–∫—Ä—ã—Ç—å" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /open!', reply_markup=ReplyKeyboardRemove())
    if t == '–æ—Ç–∫—Ä—ã—Ç—å':
        reply_keyboard = [['–†–∞–Ω–¥–æ–º–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ‚ÅâÔ∏è', '–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üì£'],
                          ['–ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–∏–ø-—Ö–æ–ø üéµüé∂üéµ', '–û–±—Ä–∞–∑–æ–≤–∞—á–∏ üôá‚Äç‚ôÄÔ∏èüôá'],
                          ['Billboard üíΩ', '–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ä–µ–ø–µ—Ä–∞ üï∫'],
                          ['–∑–∞–∫—Ä—ã—Ç—å']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
        update.message.reply_text('–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!\
        –ß—Ç–æ –±—ã –∑–∞–∫—Ä—ã—Ç—å –Ω–∞–ø–∏—à–∏ "–∑–∞–∫—Ä—ã—Ç—å" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /close!', reply_markup=markup)
    if t == '–Ω–∞–∑–∞–¥':
        update.message.reply_text('–æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...',reply_markup=ReplyKeyboardRemove())
        reply_keyboard = [['–†–∞–Ω–¥–æ–º–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ‚ÅâÔ∏è', '–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üì£'],
                          ['–ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–∏–ø-—Ö–æ–ø üéµüé∂üéµ', '–û–±—Ä–∞–∑–æ–≤–∞—á–∏ üôá‚Äç‚ôÄÔ∏èüôá'],
                          ['Billboard üíΩ', '–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ä–µ–ø–µ—Ä–∞ üï∫'],
                          ['–∑–∞–∫—Ä—ã—Ç—å']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
        update.message.reply_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markup)
    if t == '—Ä–∞–Ω–¥–æ–º–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ‚ÅâÔ∏è':
        update.message.reply_text('–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...', reply_markup=ReplyKeyboardRemove())
        reply_keyboard = [['–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å', '–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ —Ä–µ–ª–∏–∑—ã'],
                          ['–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ –∏–Ω—Ç–µ—Ä–≤—å—é', '–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ –±–∞—Ç–ª—ã'],
                          ['–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ –∫–ª–∏–ø—ã', '–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
        update.message.reply_text('–†–∞–Ω–¥–æ–º–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:', reply_markup=markup)
    if t == '—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ üì£':
        update.message.reply_text('–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...', reply_markup=ReplyKeyboardRemove())
        reply_keyboard = [['–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ —Ö–∏–ø-—Ö–æ–ø–∞', '–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ —Ä–µ–ª–∏–∑—ã'],
                          ['–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –∏–Ω—Ç–µ—Ä–≤—å—é', '–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –±–∞—Ç–ª—ã'],
                          ['–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –∫–ª–∏–ø—ã', '–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
        update.message.reply_text('–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:', reply_markup=markup)
    if t == '–æ–±—Ä–∞–∑–æ–≤–∞—á–∏ üôá‚Äç‚ôÄÔ∏èüôá':
        update.message.reply_text('–æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—á–∏...', reply_markup=ReplyKeyboardRemove())
        reply_keyboard = [['–°–ª—É—á–∞–π–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—á', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—á–∏'],
                          ['–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
        update.message.reply_text('–û–±—Ä–∞–∑–æ–≤–∞—á–∏:', reply_markup=markup)
    if t == 'billboard üíΩ':
        update.message.reply_text('–æ—Ç–∫—Ä—ã–≤–∞–µ–º –±–∏–ª–ª–±–æ—Ä–¥—ã...', reply_markup=ReplyKeyboardRemove())
        reply_keyboard = [['Billboard hot 100', 'Billboard 200', 'Artists 100'],
                          ['–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
        update.message.reply_text('–ë–∏–ª–ª–±–æ—Ä–¥—ã:', reply_markup=markup)
    if t == '—É–∑–Ω–∞—Ç—å –ø—Ä–æ —Ä–µ–ø–µ—Ä–∞ üï∫':
        update.message.reply_text('–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ "—Ä–µ–ø–µ—Ä –ò–ú–Ø –ê–†–¢–ò–°–¢–ê". \n\n\
        –ï—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ç—ã —Å–æ–≤–µ—Ä—à–∏–ª –æ—à–∏–±–∫—É.')
    if t == 'billboard hot 100':
        update.message.reply_text('–ù–∞–ø–∏—à–∏ –º–Ω–µ "–±–∏–ª–ª–±–æ—Ä–¥ —Ö–æ—Ç –ö–û–õ–õ–ò–ß–ï–°–¢–í–û –ú–ï–°–¢"')
    if t == 'billboard 200':
        update.message.reply_text('–ù–∞–ø–∏—à–∏ –º–Ω–µ "–±–∏–ª–ª–±–æ—Ä–¥ –ö–û–õ–õ–ò–ß–ï–°–¢–í–û –ú–ï–°–¢"')
    if t == 'artists 100':
        update.message.reply_text('–ù–∞–ø–∏—à–∏ –º–Ω–µ "–±–∏–ª–ª–±–æ—Ä–¥ –∞—Ä—Ç–∏—Å—Ç—ã –ö–û–õ–õ–ò–ß–ï–°–¢–í–û –ú–ï–°–¢"')


def start(bot, update):
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ö–æ–¥—è—á–∞—è —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è —Ö–∏–ø-—Ö–æ–ø–∞! (–∏–ª–∏ –Ω–µ —Å–æ–≤—Å–µ–º...)\n\n\
    –û–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –ø—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–±–µ —Ç–∞–∫ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ)\n\n\
    –ï—Å–ª–∏ —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, —Ç–æ –º–æ–∂–µ—à—å –µ—ë –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π '/close' –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å '–∑–∞–∫—Ä—ã—Ç—å', –∞ –æ—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞ - \
    –∫–æ–º–∞–Ω–¥–æ–π '/open' –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–≤ '–æ—Ç–∫—Ä—ã—Ç—å'. \n\n\
    –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É '/help'", reply_markup=markup)


def close(bot, update):
    update.message.reply_text('–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!\
    –ß—Ç–æ –±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏ "–æ—Ç–∫—Ä—ã—Ç—å" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /open!', reply_markup=ReplyKeyboardRemove())


def open(bot, update):
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    update.message.reply_text('–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!\
    –ß—Ç–æ –±—ã –∑–∞–∫—Ä—ã—Ç—å –Ω–∞–ø–∏—à–∏ "–∑–∞–∫—Ä—ã—Ç—å" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /close!', reply_markup=markup)


def help(bot, update):
    update.message.reply_text('–ø–æ—Ç–æ–º –Ω–∞–ø–∏—à—É')


def main():
    flow = FlowParser()
    updater = Updater("593099290:AAFCDXE1FvqvQ55ArutQKTVv3_wG08lQzjE")
    dp = updater.dispatcher

    text_handler = MessageHandler(Filters.text, main_answer)
    dp.add_handler(text_handler)
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("close", close))
    dp.add_handler(CommandHandler("open", open))

    print('–±–æ—Ç —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª')

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
